service: enterprise

frameworkVersion: '2'

custom:
    secrets: ${file(secrets.json)}

provider:
    name: aws
    runtime: nodejs12.x
    lambdaHashingVersion: 20201221
    region: sa-east-1
    memorySize: 256
    stage: ${self:custom.secrets.NODE_ENV}
    environment:
        NODE_ENV: ${self:custom.secrets.NODE_ENV}
        DB_NAME: ${self:custom.secrets.DB_NAME}
        DB_USER: ${self:custom.secrets.DB_USER}
        DB_PASSWORD: ${self:custom.secrets.DB_PASSWORD}
        DB_HOST: ${self:custom.secrets.DB_HOST}
        DB_PORT: ${self:custom.secrets.DB_PORT}
    vpc:
        securityGroupIds:
            - ${self:custom.secrets.SECURITY_GROUP_ID}
        subnetIds:
            - ${self:custom.secrets.SUBNET1_ID}
            - ${self:custom.secrets.SUBNET2_ID}
            - ${self:custom.secrets.SUBNET3_ID}

functions:
    healthCheck:
        handler: handler.healthCheck
        events:
            - http:
                  path: /
                  method: get
                  cors: true
    create:
        handler: handler.create
        events:
            - http:
                  path: employee
                  method: post
                  cors: true
    getAll:
        handler: handler.getAll
        events:
            - http:
                  path: employee
                  method: get
                  cors: true
    getOne:
        handler: handler.getOne
        events:
            - http:
                  path: employee/{id}
                  method: get
                  cors: true
    update:
        handler: handler.update
        events:
            - http:
                  path: employee/{id}
                  method: put
                  cors: true
    delete:
        handler: handler.delete
        events:
            - http:
                  path: employee/{id}
                  method: delete
                  cors: true

plugins:
    - serverless-offline
